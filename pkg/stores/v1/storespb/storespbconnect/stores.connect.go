// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bobadojo/stores/v1/stores.proto

package storespbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	storespb "github.com/bobadojo/go/pkg/stores/v1/storespb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// StoresName is the fully-qualified name of the Stores service.
	StoresName = "bobadojo.stores.v1.Stores"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// StoresListStoresProcedure is the fully-qualified name of the Stores's ListStores RPC.
	StoresListStoresProcedure = "/bobadojo.stores.v1.Stores/ListStores"
	// StoresFindStoresProcedure is the fully-qualified name of the Stores's FindStores RPC.
	StoresFindStoresProcedure = "/bobadojo.stores.v1.Stores/FindStores"
	// StoresGetStoreProcedure is the fully-qualified name of the Stores's GetStore RPC.
	StoresGetStoreProcedure = "/bobadojo.stores.v1.Stores/GetStore"
)

// StoresClient is a client for the bobadojo.stores.v1.Stores service.
type StoresClient interface {
	// List all stores.
	ListStores(context.Context, *connect.Request[storespb.ListStoresRequest]) (*connect.Response[storespb.ListStoresResponse], error)
	// Returns a list of all stores in a specified region.
	FindStores(context.Context, *connect.Request[storespb.FindStoresRequest]) (*connect.Response[storespb.FindStoresResponse], error)
	// Returns a specific store.
	GetStore(context.Context, *connect.Request[storespb.GetStoreRequest]) (*connect.Response[storespb.Store], error)
}

// NewStoresClient constructs a client for the bobadojo.stores.v1.Stores service. By default, it
// uses the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewStoresClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) StoresClient {
	baseURL = strings.TrimRight(baseURL, "/")
	storesMethods := storespb.File_bobadojo_stores_v1_stores_proto.Services().ByName("Stores").Methods()
	return &storesClient{
		listStores: connect.NewClient[storespb.ListStoresRequest, storespb.ListStoresResponse](
			httpClient,
			baseURL+StoresListStoresProcedure,
			connect.WithSchema(storesMethods.ByName("ListStores")),
			connect.WithClientOptions(opts...),
		),
		findStores: connect.NewClient[storespb.FindStoresRequest, storespb.FindStoresResponse](
			httpClient,
			baseURL+StoresFindStoresProcedure,
			connect.WithSchema(storesMethods.ByName("FindStores")),
			connect.WithClientOptions(opts...),
		),
		getStore: connect.NewClient[storespb.GetStoreRequest, storespb.Store](
			httpClient,
			baseURL+StoresGetStoreProcedure,
			connect.WithSchema(storesMethods.ByName("GetStore")),
			connect.WithClientOptions(opts...),
		),
	}
}

// storesClient implements StoresClient.
type storesClient struct {
	listStores *connect.Client[storespb.ListStoresRequest, storespb.ListStoresResponse]
	findStores *connect.Client[storespb.FindStoresRequest, storespb.FindStoresResponse]
	getStore   *connect.Client[storespb.GetStoreRequest, storespb.Store]
}

// ListStores calls bobadojo.stores.v1.Stores.ListStores.
func (c *storesClient) ListStores(ctx context.Context, req *connect.Request[storespb.ListStoresRequest]) (*connect.Response[storespb.ListStoresResponse], error) {
	return c.listStores.CallUnary(ctx, req)
}

// FindStores calls bobadojo.stores.v1.Stores.FindStores.
func (c *storesClient) FindStores(ctx context.Context, req *connect.Request[storespb.FindStoresRequest]) (*connect.Response[storespb.FindStoresResponse], error) {
	return c.findStores.CallUnary(ctx, req)
}

// GetStore calls bobadojo.stores.v1.Stores.GetStore.
func (c *storesClient) GetStore(ctx context.Context, req *connect.Request[storespb.GetStoreRequest]) (*connect.Response[storespb.Store], error) {
	return c.getStore.CallUnary(ctx, req)
}

// StoresHandler is an implementation of the bobadojo.stores.v1.Stores service.
type StoresHandler interface {
	// List all stores.
	ListStores(context.Context, *connect.Request[storespb.ListStoresRequest]) (*connect.Response[storespb.ListStoresResponse], error)
	// Returns a list of all stores in a specified region.
	FindStores(context.Context, *connect.Request[storespb.FindStoresRequest]) (*connect.Response[storespb.FindStoresResponse], error)
	// Returns a specific store.
	GetStore(context.Context, *connect.Request[storespb.GetStoreRequest]) (*connect.Response[storespb.Store], error)
}

// NewStoresHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewStoresHandler(svc StoresHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	storesMethods := storespb.File_bobadojo_stores_v1_stores_proto.Services().ByName("Stores").Methods()
	storesListStoresHandler := connect.NewUnaryHandler(
		StoresListStoresProcedure,
		svc.ListStores,
		connect.WithSchema(storesMethods.ByName("ListStores")),
		connect.WithHandlerOptions(opts...),
	)
	storesFindStoresHandler := connect.NewUnaryHandler(
		StoresFindStoresProcedure,
		svc.FindStores,
		connect.WithSchema(storesMethods.ByName("FindStores")),
		connect.WithHandlerOptions(opts...),
	)
	storesGetStoreHandler := connect.NewUnaryHandler(
		StoresGetStoreProcedure,
		svc.GetStore,
		connect.WithSchema(storesMethods.ByName("GetStore")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bobadojo.stores.v1.Stores/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case StoresListStoresProcedure:
			storesListStoresHandler.ServeHTTP(w, r)
		case StoresFindStoresProcedure:
			storesFindStoresHandler.ServeHTTP(w, r)
		case StoresGetStoreProcedure:
			storesGetStoreHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedStoresHandler returns CodeUnimplemented from all methods.
type UnimplementedStoresHandler struct{}

func (UnimplementedStoresHandler) ListStores(context.Context, *connect.Request[storespb.ListStoresRequest]) (*connect.Response[storespb.ListStoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bobadojo.stores.v1.Stores.ListStores is not implemented"))
}

func (UnimplementedStoresHandler) FindStores(context.Context, *connect.Request[storespb.FindStoresRequest]) (*connect.Response[storespb.FindStoresResponse], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bobadojo.stores.v1.Stores.FindStores is not implemented"))
}

func (UnimplementedStoresHandler) GetStore(context.Context, *connect.Request[storespb.GetStoreRequest]) (*connect.Response[storespb.Store], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bobadojo.stores.v1.Stores.GetStore is not implemented"))
}
