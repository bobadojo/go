// Code generated by protoc-gen-connect-go. DO NOT EDIT.
//
// Source: bobadojo/menus/v1/menus.proto

package menuspbconnect

import (
	connect "connectrpc.com/connect"
	context "context"
	errors "errors"
	menuspb "github.com/bobadojo/go/pkg/menus/v1/menuspb"
	http "net/http"
	strings "strings"
)

// This is a compile-time assertion to ensure that this generated file and the connect package are
// compatible. If you get a compiler error that this constant is not defined, this code was
// generated with a version of connect newer than the one compiled into your binary. You can fix the
// problem by either regenerating this code with an older version of connect or updating the connect
// version compiled into your binary.
const _ = connect.IsAtLeastVersion1_13_0

const (
	// MenusName is the fully-qualified name of the Menus service.
	MenusName = "bobadojo.menus.v1.Menus"
)

// These constants are the fully-qualified names of the RPCs defined in this package. They're
// exposed at runtime as Spec.Procedure and as the final two segments of the HTTP route.
//
// Note that these are different from the fully-qualified method names used by
// google.golang.org/protobuf/reflect/protoreflect. To convert from these constants to
// reflection-formatted method names, remove the leading slash and convert the remaining slash to a
// period.
const (
	// MenusGetMenuProcedure is the fully-qualified name of the Menus's GetMenu RPC.
	MenusGetMenuProcedure = "/bobadojo.menus.v1.Menus/GetMenu"
)

// MenusClient is a client for the bobadojo.menus.v1.Menus service.
type MenusClient interface {
	// Returns a menu for a specific store.
	GetMenu(context.Context, *connect.Request[menuspb.GetMenuRequest]) (*connect.Response[menuspb.Menu], error)
}

// NewMenusClient constructs a client for the bobadojo.menus.v1.Menus service. By default, it uses
// the Connect protocol with the binary Protobuf Codec, asks for gzipped responses, and sends
// uncompressed requests. To use the gRPC or gRPC-Web protocols, supply the connect.WithGRPC() or
// connect.WithGRPCWeb() options.
//
// The URL supplied here should be the base URL for the Connect or gRPC server (for example,
// http://api.acme.com or https://acme.com/grpc).
func NewMenusClient(httpClient connect.HTTPClient, baseURL string, opts ...connect.ClientOption) MenusClient {
	baseURL = strings.TrimRight(baseURL, "/")
	menusMethods := menuspb.File_bobadojo_menus_v1_menus_proto.Services().ByName("Menus").Methods()
	return &menusClient{
		getMenu: connect.NewClient[menuspb.GetMenuRequest, menuspb.Menu](
			httpClient,
			baseURL+MenusGetMenuProcedure,
			connect.WithSchema(menusMethods.ByName("GetMenu")),
			connect.WithClientOptions(opts...),
		),
	}
}

// menusClient implements MenusClient.
type menusClient struct {
	getMenu *connect.Client[menuspb.GetMenuRequest, menuspb.Menu]
}

// GetMenu calls bobadojo.menus.v1.Menus.GetMenu.
func (c *menusClient) GetMenu(ctx context.Context, req *connect.Request[menuspb.GetMenuRequest]) (*connect.Response[menuspb.Menu], error) {
	return c.getMenu.CallUnary(ctx, req)
}

// MenusHandler is an implementation of the bobadojo.menus.v1.Menus service.
type MenusHandler interface {
	// Returns a menu for a specific store.
	GetMenu(context.Context, *connect.Request[menuspb.GetMenuRequest]) (*connect.Response[menuspb.Menu], error)
}

// NewMenusHandler builds an HTTP handler from the service implementation. It returns the path on
// which to mount the handler and the handler itself.
//
// By default, handlers support the Connect, gRPC, and gRPC-Web protocols with the binary Protobuf
// and JSON codecs. They also support gzip compression.
func NewMenusHandler(svc MenusHandler, opts ...connect.HandlerOption) (string, http.Handler) {
	menusMethods := menuspb.File_bobadojo_menus_v1_menus_proto.Services().ByName("Menus").Methods()
	menusGetMenuHandler := connect.NewUnaryHandler(
		MenusGetMenuProcedure,
		svc.GetMenu,
		connect.WithSchema(menusMethods.ByName("GetMenu")),
		connect.WithHandlerOptions(opts...),
	)
	return "/bobadojo.menus.v1.Menus/", http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		switch r.URL.Path {
		case MenusGetMenuProcedure:
			menusGetMenuHandler.ServeHTTP(w, r)
		default:
			http.NotFound(w, r)
		}
	})
}

// UnimplementedMenusHandler returns CodeUnimplemented from all methods.
type UnimplementedMenusHandler struct{}

func (UnimplementedMenusHandler) GetMenu(context.Context, *connect.Request[menuspb.GetMenuRequest]) (*connect.Response[menuspb.Menu], error) {
	return nil, connect.NewError(connect.CodeUnimplemented, errors.New("bobadojo.menus.v1.Menus.GetMenu is not implemented"))
}
